// Requires Fenko to run. See https://github.com/Cuber01/fenko-wally

var canvasHeight = 128;
var canvasWidth = 128;

function collide(x1, y1, w1, h1, x2, y2, w2, h2)
{
    if( x1 >= x2 && x1 <= x2 + w2 && y1 >= y2 && y1 <= y2 + h2 )
    {
        return true;
    }
    else
    {
        return false;
    }
}

class PaddleA
{
    init()
    {
        this.w = 40;
        this.h = 20;
        this.x = 50;
        this.y = 20;
    }

    update()
    {

        if(input.isButtonPressed(1073741904)) // SDLK_LEFT
        {
            this.x--;
        }
        else if (input.isButtonPressed(1073741903)) // SDLK_RIGHT
        {
            this.x++;
        }

    }

    draw()
    {
        draw.rectfill(this.x, this.y, this.w, this.h, 7);
    }
}

class PaddleB
{
    init()
    {
        this.w = 40;
        this.h = 20;
        this.x = 50;
        this.y = 20;
    }

    update()
    {

        if(input.isButtonPressed(100)) // SDLK_d
        {
            this.x++;
        }
        else if (input.isButtonPressed(97)) // SDLK_a
        {
            this.x--;
        }

    }

    draw()
    {
        draw.rectfill(this.x, this.y, this.w, this.h, 7);
    }
}

class Ball
{
    init()
    {
        this.x = 64;
        this.y = 64;
        this.r = 3;
        this.w = 4;
        this.h = 4;
        this.vel_x = 1;
        this.vel_y = 1;
    }

    update(padA, padB)
    {
        if( collide(this.x, this.y, this.w, this.h, padA.x, padA.y, padA.w, padA.h)
            || collide(this.x, this.y, this.w, this.h, padB.x, padB.y, padB.w, padB.h)
            || this.x >= canvasWidth || this.x <= 0 ||
            this.y >= canvasHeight || this.y <= 0)
        {
            this.vel_x = -this.vel_x;
            this.vel_y = -this.vel_y;
        }

        this.x += this.vel_x;
        this.y += this.vel_y;

    }

    draw()
    {
        draw.circfill(this.x, this.y, this.r, 8);
    }
}

var paddleA = PaddleA();
var paddleB = PaddleB();
var ball = Ball();

while(true)
{
    input.update();
    draw.clear(0);

    paddleA.update();
    paddleB.update();
    ball.update(paddleA, paddleB);

    paddleA.draw();
    paddleB.draw();
    ball.draw();

    render.draw();
}